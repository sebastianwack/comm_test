
fn main() -> i32 {
    let comm = comm();

    let (world_size, world_rank) = comm.init();

    if (world_rank == 0) {
        print_string("size: ");
        print_i32(world_size);
        print_string("\nrank: ");
        print_i32(world_rank);
        print_string("\n");
    }

    //send, recv, probe, get_count
    if (world_rank == 0) {
        let mut number = 42;
        comm.send(&mut number as COMM_Buf, 1, comm.int_t, 1, 37);
        print_string("Process 0 sent number ");
        print_i32(number);
        print_string("\n");
    } else if (world_rank == 1) {
        let mut number : i32;
        let status = comm.probe(0, 37);
        let get_count = comm.get_count(status, comm.int_t);
        print_string("Process 1 get_count: ");
        print_i32(get_count);
        comm.recv(&mut number as COMM_MutBuf, 1, comm.int_t, 0, 37);
        print_string("\nProcess 1 received number ");
        print_i32(number);
        print_string("\n");
    }

    //irecv, wait
    if(world_rank == 0) {
        let mut number : i32;
        let request = comm.irecv(&mut number as COMM_MutBuf, 1, comm.int_t, 1, 32);
        comm.wait(request);
        print_string("Process 0 received number ");
        print_i32(number);
        print_string("\n");
    }
    else if(world_rank == 1) {
        let mut number = 16;
        comm.send(&mut number as COMM_Buf, 1, comm.int_t, 0, 32);
        print_string("Process 1 sent number ");
        print_i32(number);
        print_string("\n");
    }

    //gather
    let mut gather_number : i32;
    if(world_rank == 0) {
        gather_number = 12;
    }
    else {
        gather_number = 17;
    }
    let mut gather_arr = [0,0];
    comm.gather(&mut gather_number as COMM_Buf, &mut gather_arr as COMM_MutBuf, 1, comm.int_t, 1);
    if(world_rank == 0) {
        if(gather_arr(0) != 0 || gather_arr(1) != 0) {
            exit(1);
        }
        else {
            print_string("gather at rank 0 ok!\n");
        }
    }
    else if(world_rank == 1) {
        if(gather_arr(0) != 12 || gather_arr(1) != 17) {
            exit(1);
        }
        else {
            print_string("gather at rank 1 ok!\n");
        }
    }

    //allgather
    gather_arr(0) = 0;
    gather_arr(1) = 0;
    gather_number++;

    //mpi type example
    let mut mpi_datatype = 0;
    mpi_type(&gather_number, &mut mpi_datatype);

    comm.allgather(&mut gather_number as COMM_Buf, &mut gather_arr as COMM_MutBuf, 1, mpi_datatype);
    if(gather_arr(0) != 13 || gather_arr(1) != 18) {
        exit(1);
    }
    else {
        print_string("allgather ok!\n");
    }

    //allreduce
    let mut allreduce_sum : i32;
    comm.allreduce(&mut gather_number as COMM_Buf, &mut allreduce_sum as COMM_MutBuf, 1, comm.int_t, comm.ops.sum);
    if(allreduce_sum == 31) {
        print_string("allreduce (sum) ok!\n");
    }
    else {
        exit(1);
    }

    let mut allreduce_max : i32;
    comm.allreduce(&mut gather_number as COMM_Buf, &mut allreduce_max as COMM_MutBuf, 1, comm.int_t, comm.ops.max);
    if(allreduce_max == 18) {
        print_string("allreduce (max) ok!\n");
    }
    else {
        exit(1);
    }

    //multiple send/recv
    let arr = alloc_cpu(6* sizeof[int]());
    let mut arr_data = bitcast[&mut [int]](arr.data);

    if(world_rank == 1) {
        for i in range(0,5) {
            arr_data(i) = (i+1)*(i+1);
        }
        comm.send(arr_data as COMM_MutBuf, 6, comm.int_t, 0, 27);
    }
    else {
        comm.recv(arr_data as COMM_MutBuf, 6, comm.int_t, 1, 27);
        for i in range(0,5) {
            if(arr_data(i) != (i+1)*(i+1)) {
                exit(1);
            }
        }
        print_string("multiple send/recv ok!\n");
    }

    // Finalize the comm environment.
    comm.finalize();
    0
}
